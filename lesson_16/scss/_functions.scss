@function percent($num1, $num2) {
  $rez: math.div($num1, $num2) * 100%;
  @return $rez;
}

@function toRem($num1, $num2: 16) {
  $rez: math.div($num1, $num2) + rem;
  @return $rez;
}
@function toEm($num1, $num2: 16) {
  $rez: math.div($num1, $num2) + em;
  @return $rez;
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поїнти в EM
  $widthFromMedia: toEm($widthFrom);
  $widthToMedia: toEm($widthTo);

  // Формула плаваючого значення
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

  // Отримання значення властивості
  $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize)
    ")"};
  // Якщо негативні значення
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp("
      toRem($startSize)
      ","
      $flyValue
      ","
      toRem($minSize)
      ")"};
  }

  // Встановлюємо значення за замовчуванням
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: toRem($startSize);
    }
  }
  // Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Якщо підтримується clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    // Якщо не підтримується clamp();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div(
            $widthFrom,
            16
          ) - math.div($widthTo, 16)}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: toRem($minSize);
    }
  }
}

// .....

// Налаштування адаптивної сітки =================

// Мінімальна ширина стрінки
$minWidth: 320;
// Ширина полотна (макета)
$minWidth: 1920;
// Ширина обмежуючого контейнера (0 = немає обмеження)
$minWidth: 1170;
// Загальний відступ у контейнері
// (30 = по 15px ліворуч та праворуч, 0 = немає відступу)
$containerPadding: 30;
/*
//  Ширина спрацювання першого брекпоінту
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейкпоінти
$pc: em(
  $containerWidth
); //ПК, ноутбуки,деякі планшети в горизонтальному положені
$tablet: em(991.98); //Планшети, деякі телефони в горизонтальному положені
$mobile: em(767.98); //Телефони
$mobileSmall: em(479.98); //Телефони S

//Grids
@mixin gridsCards($type: fit, $min: 280px, $max: 1 fr, $gap: 30px) {
}

//Адаптивна властивість (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize: 0,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth
) {
}
*/